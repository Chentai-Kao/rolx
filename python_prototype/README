Rolx Python Prototype
Written by: Cobra Kao, Tai Guo
Last changed: 2/13/2014

Design consideration:
1. Egonet features: 
In the paper "Egonet features include the number of within-egonet edges, as 
well as the number of edges entering and leaving the egonet. In our 
implementation, we choose to make the number of edges within the egonet to be 
one column of features, and the number of edges entering and leaving the 
egonet to be another column of features.

2. Recursive feature generation:
Once a feature is pruned, we do not use it to generate new features in the next
iteration. This is a time-efficient choice. A conservative method is to use all
features to generate the next round features. There exists cases where a pruned
feature can generate new recursive features which are not correlated with any
old features. In our time-efficient method, these useful features will never be
generate. So we might omit some useful features. However, using all features to
generate next round features will cause exponential increasing complexity. In a
large scale graph, this is unacceptable.

3. Pruning features:
We only use those remained features to build the s-friend graph. Another choice
is using all features to build the s-friend graph. If feature A is round-one, 
feature B is round-two and feature C is round-three. At round 2, A and B are
friend so B is pruned. At round 3, C is friend of B but not a friend of A. In 
our method, we do not use B in the round 3 s-friend graph, so C cannot link A
and will not be pruned. In the alternate method, B will be used in the round-3
s-friend graph, so A-B-C will be in on connected component, C will be pruned.
Our choice is based on the consideration of eliminate the s-friend chain, more
conservative on feature pruning (we are not conservative in feature generation,
so this part is a neutralization for that part) and more efficient (using less
features in the s-friend graph).

Remaining problem:
1. Directed and undirected:
Our prototype now support the undirected graph. To deal with directed graph, we
have more choice on the feature. We may use inbound edges and outbound edges as
different features or sum them up. Our current choice is that the neighbourhood
features include 5 columns: in degree, out degree, number of edges within the 
egonet, number of edges go into the egonet and the number of the edges go out 
the egonet. The recursive method remains the same.

2. Non-negative factorization convergence condition:
Current prototype use 50 iteration in the factorization. This number is in the 
paper as the regular convergence speed. We may choose other convergence 
conditions, like the matrices do not change under some threshold. More tune is 
needed as a trade-off between convergence speed and accuracy.